diff --git a/sdk/cargo-build-bpf/src/main.rs b/sdk/cargo-build-bpf/src/main.rs
index 8fb3a9d2f5..4a95f84b6e 100644
--- a/sdk/cargo-build-bpf/src/main.rs
+++ b/sdk/cargo-build-bpf/src/main.rs
@@ -21,6 +21,7 @@ struct Config<'a> {
     cargo_args: Option<Vec<&'a str>>,
     bpf_out_dir: Option<PathBuf>,
     bpf_sdk: PathBuf,
+    bpf_tools: Option<PathBuf>,
     bpf_tools_version: &'a str,
     dump: bool,
     features: Vec<String>,
@@ -43,6 +44,7 @@ impl Default for Config<'_> {
                 .join("sdk")
                 .join("bpf"),
             bpf_out_dir: None,
+            bpf_tools: None,
             bpf_tools_version: "(unknown)",
             dump: false,
             features: vec![],
@@ -306,9 +308,9 @@ fn check_undefined_symbols(config: &Config, program: &Path) {
         Regex::new(r"^ *[0-9]+: [0-9a-f]{16} +[0-9a-f]+ +NOTYPE +GLOBAL +DEFAULT +UND +(.+)")
             .unwrap();
     let readelf = config
-        .bpf_sdk
-        .join("dependencies")
-        .join("bpf-tools")
+        .bpf_tools
+        .clone()
+        .unwrap_or_else(|| config.bpf_sdk.join("dependencies").join("bpf-tools"))
         .join("llvm")
         .join("bin")
         .join("llvm-readelf");
@@ -345,9 +347,9 @@ fn check_undefined_symbols(config: &Config, program: &Path) {
 // check whether custom BPF toolchain is linked, and link it if it is not.
 fn link_bpf_toolchain(config: &Config) {
     let toolchain_path = config
-        .bpf_sdk
-        .join("dependencies")
-        .join("bpf-tools")
+        .bpf_tools
+        .clone()
+        .unwrap_or_else(|| config.bpf_sdk.join("dependencies").join("bpf-tools"))
         .join("rust");
     let rustup = PathBuf::from("rustup");
     let rustup_args = vec!["toolchain", "list", "-v"];
@@ -479,34 +481,36 @@ fn build_bpf_package(config: &Config, target_directory: &Path, package: &cargo_m
         .join("solana")
         .join(config.bpf_tools_version)
         .join(package);
-    install_if_missing(
-        config,
-        package,
-        "https://github.com/solana-labs/bpf-tools/releases/download",
-        bpf_tools_download_file_name,
-        &target_path,
-    )
-    .unwrap_or_else(|err| {
-        // The package version directory doesn't contain a valid
-        // installation, and it should be removed.
-        let target_path_parent = target_path.parent().expect("Invalid package path");
-        fs::remove_dir_all(&target_path_parent).unwrap_or_else(|err| {
-            eprintln!(
-                "Failed to remove {} while recovering from installation failure: {}",
-                target_path_parent.to_string_lossy(),
-                err,
-            );
+    if config.bpf_tools.is_none() {
+        install_if_missing(
+            config,
+            package,
+            "https://github.com/solana-labs/bpf-tools/releases/download",
+            bpf_tools_download_file_name,
+            &target_path,
+        )
+        .unwrap_or_else(|err| {
+            // The package version directory doesn't contain a valid
+            // installation, and it should be removed.
+            let target_path_parent = target_path.parent().expect("Invalid package path");
+            fs::remove_dir_all(&target_path_parent).unwrap_or_else(|err| {
+                eprintln!(
+                    "Failed to remove {} while recovering from installation failure: {}",
+                    target_path_parent.to_string_lossy(),
+                    err,
+                );
+                exit(1);
+            });
+            eprintln!("Failed to install bpf-tools: {}", err);
             exit(1);
         });
-        eprintln!("Failed to install bpf-tools: {}", err);
-        exit(1);
-    });
-    link_bpf_toolchain(config);
+        link_bpf_toolchain(config);
+    }
 
     let llvm_bin = config
-        .bpf_sdk
-        .join("dependencies")
-        .join("bpf-tools")
+        .bpf_tools
+        .clone()
+        .unwrap_or_else(|| config.bpf_sdk.join("dependencies").join("bpf-tools"))
         .join("llvm")
         .join("bin");
     env::set_var("CC", llvm_bin.join("clang"));
@@ -529,6 +533,9 @@ fn build_bpf_package(config: &Config, target_directory: &Path, package: &cargo_m
         "bpfel-unknown-unknown",
         "--release",
     ];
+    if config.bpf_tools.is_some() {
+        cargo_build_args.remove(0);
+    }
     if config.no_default_features {
         cargo_build_args.push("--no-default-features");
     }
@@ -732,6 +739,14 @@ fn main() {
                 .default_value(&default_bpf_sdk)
                 .help("Path to the Solana BPF SDK"),
         )
+        .arg(
+            Arg::new("bpf_tools")
+                .env("BPF_TOOLS_PATH")
+                .long("bpf-tools")
+                .value_name("PATH")
+                .takes_value(true)
+                .help("Path to the Solana BPF toolchain"),
+        )
         .arg(
             Arg::new("cargo_args")
                 .help("Arguments passed directly to `cargo build`")
@@ -797,6 +812,7 @@ fn main() {
 
     let bpf_sdk: PathBuf = matches.value_of_t_or_exit("bpf_sdk");
     let bpf_out_dir: Option<PathBuf> = matches.value_of_t("bpf_out_dir").ok();
+    let bpf_tools_dir: Option<PathBuf> = matches.value_of_t("bpf_tools").ok();
 
     let config = Config {
         cargo_args: matches
@@ -819,6 +835,16 @@ fn main() {
                     .join(bpf_out_dir)
             }
         }),
+        bpf_tools: bpf_tools_dir.map(|bpf_tools| {
+            bpf_tools.canonicalize().unwrap_or_else(|err| {
+                eprintln!(
+                    "BPF toolchain path does not exist: {}: {}",
+                    bpf_tools.display(),
+                    err
+                );
+                exit(1);
+            })
+        }),
         bpf_tools_version,
         dump: matches.is_present("dump"),
         features: matches.values_of_t("features").ok().unwrap_or_default(),
